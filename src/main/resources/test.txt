


 In eager initialization, the instance of singleton class is created at the time of class loading, this is the easiest method to create a singleton class but it
 has a drawback that instance is created even though client application might not be using it?
 Here is the implementation of static initialization singleton class.

 public class EagerInitializedSingleton {
 private static final EagerInitializedSingleton instance = new EagerInitializedSingleton();
 //private constructor to avoid client applications to use constructor
 private EagerInitializedSingleton(){}
 public static EagerInitializedSingleton getInstance(){
 return instance;
 }
 }

 If your singleton class is not using a lot of resources, this is the approach to use. But in most of the scenarios, singleton classes are created for resources
 such as file system, database connections etc and we should avoid the instantiation until unless client calls  method. Also this method doesnt provide any options for exception handling.